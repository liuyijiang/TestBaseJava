总结
classLoader 
ClassLoader就是用来动态加载class文件到内存当中用的。

BootStrap ClassLoader：称为启动类加载器，是Java类加载层次中最顶层的类加载器，负责加载JDK中的核心类库，如
：rt.jar、resources.jar、charsets.jar等
(?Launcher)

Extension ClassLoader：称为扩展类加载器，负责加载Java的扩展类库，默认加载JAVA_HOME/jre/lib/ext/目下的所有
jar。(?java的扩展类库)

App ClassLoader：称为系统类加载器，负责加载应用程序classpath目录下的所有jar和class文件。 自己的类

###加载原理
双亲委托模型来搜索类的
首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，
则把任务转交给Extension ClassLoader试图加载，如果也没加载到，
则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常









 除了Java默认提供的三个ClassLoader之外，用户还可以根据需要定义自已的ClassLoader，
 而这些自定义的ClassLoader都必须继承自java.lang.ClassLoader类，
 也包括Java提供的另外二个ClassLoader（Extension ClassLoader和App ClassLoader）在内，
 但是Bootstrap ClassLoader不继承自ClassLoader，
 因为它不是一个普通的Java类，底层由C++编写，已嵌入到了JVM内核当中，
 当JVM启动后，Bootstrap ClassLoader也随着启动，
 负责加载完核心类库后，并构造Extension ClassLoader和App ClassLoader类加载器。